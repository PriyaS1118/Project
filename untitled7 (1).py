# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPqlOAY0RehbTot0oBs7qx4-nj2SakXs
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

def preprocess_data(data):
    # Data Preprocessing
    data['Date and Time'] = pd.to_datetime(data['Date and Time'], format='[%Y-%m-%d %H:%M:%S.%f]')
    data['Hour'] = data['Date and Time'].dt.hour
    data['Minute'] = data['Date and Time'].dt.minute
    data.drop(['Date and Time'], axis=1, inplace=True)

    # Convert 'Checksum' into categorical labels
    data['Checksum'] = pd.cut(data['Checksum'], bins=3, labels=['low', 'medium', 'high'])

    # Remove rows with missing values
    data.dropna(inplace=True)

    return data

def train_model(X, y):
    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Model Training
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_scaled, y_train)

    # Evaluation
    y_pred = model.predict(X_test_scaled)
    accuracy = accuracy_score(y_test, y_pred) * 100

    return model, accuracy, X_test, y_test, y_pred

def main():
    st.title("Predictive Maintenance of Sensor")

    # Load data
    uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.write("Original Data:")
        st.write(data.head())

        # Data preprocessing
        data = preprocess_data(data)

        # Feature Engineering
        X = data[['Hour', 'Minute', 'Humidity', 'Temperature']]
        y = data['Checksum']

        # Train the model
        model, accuracy, X_test, y_test, y_pred = train_model(X, y)

        # Display accuracy
        st.write('Accuracy:', accuracy, '%')

        # Check if maintenance needed
        if 'high' in y_pred:
            st.write('Maintenance needed.')
        else:
            st.write('No maintenance needed.')

        # Find date and time of incorrect readings
        incorrect_indices = y_test.index[y_test != y_pred]
        incorrect_dates_times = data.loc[incorrect_indices, 'Hour']
        st.write('Hour of incorrect readings:')
        st.write(incorrect_dates_times)

        # Visualizations
        st.subheader("Visualizations")
        st.pyplot(plt.figure(figsize=(14, 6)))

        # Scatter plot of Humidity and Temperature
        plt.subplot(1, 2, 1)
        sns.scatterplot(data=data, x='Humidity', y='Temperature', hue='Checksum', palette='viridis', legend='full')
        plt.title('Scatter plot of Humidity vs Temperature')
        plt.xlabel('Humidity')
        plt.ylabel('Temperature')

        # Distribution of Checksum
        plt.subplot(1, 2, 2)
        sns.countplot(data=data, x='Checksum', palette='muted')
        plt.title('Distribution of Checksum')
        plt.xlabel('Checksum')
        plt.ylabel('Count')

        plt.tight_layout()
        st.pyplot(plt)

if __name__ == "__main__":
    main()